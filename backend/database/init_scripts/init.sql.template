-- Create database owned by the user
CREATE DATABASE ${POSTGRES_DB} OWNER ${POSTGRES_USER};

-- Create user
CREATE USER ${POSTGRES_USER} WITH PASSWORD '${POSTGRES_PASSWORD}';

-- Grant all privileges on all tables in the database to the user
GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USER};

\c ${POSTGRES_DB};

-- SCHEMA
CREATE TABLE "user" (
    id SERIAL PRIMARY KEY,
    email VARCHAR(50) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- hashed --
    passwordSalt VARCHAR(64) NOT NULL,
    is_verified BOOLEAN DEFAULT FALSE, -- for email verification --
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    biography TEXT,
    age INTEGER,
    gender VARCHAR(20),
    sexual_preference VARCHAR(20),
    fame_rating INTEGER DEFAULT 0,
    report_count INTEGER DEFAULT 0,
    profile_picture VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE "email_verification" (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES "user" (id) ON DELETE CASCADE,
    token VARCHAR(64) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_photo (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    photo VARCHAR(255) NOT NULL,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE SET NULL
);

CREATE TABLE interest (
    id SERIAL PRIMARY KEY,
    interest VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE user_interest (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    interest_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES "user" (id) ON DELETE CASCADE,
    FOREIGN KEY (interest_id) REFERENCES "interest" (id) ON DELETE CASCADE,
    UNIQUE (user_id, interest_id)
);

CREATE TABLE history (
    id SERIAL PRIMARY KEY,
    visitor_id INTEGER NOT NULL,
    visited_id INTEGER NOT NULL,
    visited_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (visitor_id) REFERENCES "user" (id) ON DELETE CASCADE,
    FOREIGN KEY (visited_id) REFERENCES "user" (id) ON DELETE CASCADE
);

CREATE TABLE dm (
    id SERIAL PRIMARY KEY,
    sender_id INTEGER NOT NULL,
    receiver_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES "user" (id) ON DELETE SET NULL,
    FOREIGN KEY (receiver_id) REFERENCES "user" (id) ON DELETE SET NULL
);

CREATE TABLE user_likes (
    id SERIAL PRIMARY KEY,
    liking_user_id INTEGER NOT NULL,
    liked_user_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    are_matched BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (liking_user_id) REFERENCES "user" (id) ON DELETE CASCADE,
    FOREIGN KEY (liked_user_id) REFERENCES "user" (id) ON DELETE CASCADE,
    UNIQUE (liking_user_id, liked_user_id)
);

CREATE TABLE blocked_users (
    id SERIAL PRIMARY KEY,
    blocking_user_id INTEGER NOT NULL,
    blocked_user_id INTEGER NOT NULL,
    blocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (blocking_user_id) REFERENCES "user" (id) ON DELETE CASCADE,
    FOREIGN KEY (blocked_user_id) REFERENCES "user" (id) ON DELETE CASCADE,
    UNIQUE (blocking_user_id, blocked_user_id)
);
